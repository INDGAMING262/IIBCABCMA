<!DOCTYPE html>
<head>
 <meta http-equiv="X-UA-Compatible" content="IE=edge">
 <meta name="viewport" content="width=device-width, initial-scale-1.0">
 <link rel="stylesheet" href="paint.css">
 <title>Drawing app</title>
</head>
<section class="container">
 <div id="toolbar">
 <h1>Draw:</h1>
 <label for="stroke">Stroke</label>
 <input id="stroke" type="color" value="#ff0000">
 <label for="lineWidth">Line Width</label>
 <input id="lineWidth" type="number" value="5">
 <button id="clear">Clear</button>
 </div>
 <div class="drawing-board">
 <canvas id="drawing-board"></canvas>
 </div>
</section>
<script src="./index.js"></script>
</body>
</html>
Index.js
const canvas = document.getElementById('drawing-board');
const toolbar = document.getElementById('toolbar');
const ctx = canvas.getContext('2d');
const canvasOffsetX = canvas.offsetLeft;
const canvasOffsetY = canvas.offsetTop;
canvas.width = window.innerWidth - canvasOffsetX;
canvas.height = window.innerHeight - canvasOffsetY;
let isPainting = false;
let lineWidth = 5;
let startX;
let startY;
 if (e.target.id === 'clear') {
 ctx.clearRect(0, 0, canvas.width, canvas.height);
 }
});
toolbar.addEventListener('change', e => {
 if (e.target.id === 'stroke') {
 ctx.strokeStyle = e.target.value;
 }
 if (e.target.id === 'lineWidth') {
 lineWidth = parseInt(e.target.value);
 }
});
const draw = (e) => {
 if (!isPainting) {
 return;
 }
 ctx.lineWidth = lineWidth;
 ctx.lineCap = 'round';
 ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);
 ctx.stroke();
}
canvas.addEventListener('mousedown', (e) => {
 isPainting = true;
 startX = e.clientX - canvasOffsetX;
 startY = e.clientY - canvasOffsetY;
 ctx.beginPath();
 ctx.moveTo(startX, startY);
});
canvas.addEventListener('mouseup', e => {
 isPainting = false;
 ctx.closePath();
});
canvas.addEventListener('mousemove', draw);
